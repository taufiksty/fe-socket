<template>
  <div id="outer-container-app" class="bg-gray-100">
    <div id="app" class="container mx-auto p-4">
      <h1 class="text-2xl font-bold mb-4">Simple Chat App</h1>
      <div>
        <input
          v-model="roomId"
          class="border p-2 mr-2"
          placeholder="Enter room ID"
        />
        <button @click="joinRoom" class="bg-blue-500 text-white p-2 rounded">
          Join Room
        </button>
      </div>
      <div class="mt-6">
        <div class="bg-white rounded-lg shadow-md p-4 mb-4">
          <h2 class="text-xl font-semibold mb-2">Room: {{ roomId }}</h2>
          <div class="h-64 overflow-y-auto mb-4">
            <div v-for="(message, index) in messages" :key="index" class="mb-2">
              <strong>{{ message.sender }}:</strong> {{ message.text }}
            </div>
          </div>
          <div class="flex">
            <input
              v-model="newMessage"
              @keyup.enter="sendMessage"
              class="border p-2 flex-grow mr-2"
              placeholder="Type a message..."
            />
            <button
              @click="sendMessage"
              class="bg-blue-500 text-white p-2 rounded"
            >
              Send
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
export default {
  data() {
    return {
      roomId: "",
      messages: [],
      newMessage: "",
      socket: null,
      username: "",
    };
  },
  methods: {
    joinRoom() {
      if (this.roomId) {
        // Close existing WebSocket connection if open
        if (this.socket) {
          this.closeConnection();
        }

        this.username = prompt("Enter your username:") || "Anonymous";

        // Load stored messages from localStorage
        const storedMessages = localStorage.getItem(`messages_${this.roomId}`);
        this.messages = storedMessages ? JSON.parse(storedMessages) : [];

        this.connectWebSocket();
      }
    },
    connectWebSocket() {
      this.socket = new WebSocket(`ws://localhost:8080/ws/${this.roomId}`);

      this.socket.onmessage = (event) => {
        const message = JSON.parse(event.data);
        this.messages.push(message);

        // Store updated messages in localStorage
        localStorage.setItem(
          `messages_${this.roomId}`,
          JSON.stringify(this.messages)
        );
      };

      this.socket.onclose = () => {
        console.log(`Disconnected from room ${this.roomId}`);
      };
    },
    sendMessage() {
      if (this.newMessage && this.socket) {
        const message = {
          sender: this.username,
          text: this.newMessage,
        };
        this.socket.send(JSON.stringify(message));
        this.newMessage = "";
      }
    },
    closeConnection() {
      if (this.socket) {
        this.socket.close();
        this.socket = null;
      }
    },
  },
  beforeDestroy() {
    this.closeConnection(); // Ensure WebSocket connection is closed on destroy
  },
};
</script>

<style scoped></style>
